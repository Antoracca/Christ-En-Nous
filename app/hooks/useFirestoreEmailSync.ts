// hooks/useFirestoreEmailSync.ts
// Hook pour synchroniser l'email Firestore apr√®s une reconnexion suite √† un changement.

import { useEffect } from 'react';
import { doc, updateDoc, getDoc } from 'firebase/firestore';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { db } from 'services/firebase/firebaseConfig';
import { useAuth } from '@/context/AuthContext';

export const useFirestoreEmailSync = () => {
  const { user, refreshUserProfile } = useAuth();

  useEffect(() => {
    // Cette fonction anonyme est d√©clar√©e async pour pouvoir utiliser await √† l'int√©rieur de l'useEffect
    const checkAndSync = async () => {
      // On ne fait rien si l'utilisateur n'est pas encore charg√©
      if (!user) {
        return;
      }

      try {
        console.log('üîç [SYNC] V√©rification d\'une synchronisation Firestore en attente...');

        // 1. V√©rifier s'il y a une synchronisation en attente dans le stockage local
        const syncDataString = await AsyncStorage.getItem('@firestoreSyncPending');

        if (!syncDataString) {
          console.log('‚úÖ [SYNC] Aucune synchronisation en attente.');
          return;
        }

        const syncData = JSON.parse(syncDataString);
        console.log('üìã [SYNC] T√¢che de synchronisation trouv√©e pour:', syncData.email);

        // 2. S'assurer que la t√¢che concerne bien l'utilisateur actuellement connect√©
        if (user.uid === syncData.uid) {
          console.log('üîÑ [SYNC] D√©marrage de la synchronisation pour l\'utilisateur connect√©...');
          
          const userDocRef = doc(db, 'users', user.uid);
          const userDoc = await getDoc(userDocRef);

          // 3. V√©rifier que le document existe et que la mise √† jour est bien n√©cessaire
          if (userDoc.exists() && userDoc.data().email !== syncData.email) {
            console.log(`üìù [SYNC] Mise √† jour de l'email dans Firestore: ${userDoc.data().email} ‚Üí ${syncData.email}`);
            
            await updateDoc(userDocRef, {
              email: syncData.email,
              emailVerified: true, // L'email est forc√©ment v√©rifi√© √† ce stade
              lastEmailUpdate: new Date().toISOString()
            });

            console.log('‚úÖ [SYNC] Firestore synchronis√© avec succ√®s !');

            // 4. Rafra√Æchir le profil dans le contexte de l'application
            await refreshUserProfile();
          } else {
             console.log('üëç [SYNC] L\'email dans Firestore est d√©j√† √† jour.');
          }

          // 5. Nettoyer les donn√©es temporaires pour ne pas re-lancer la synchro
          console.log('üßπ [SYNC] Nettoyage des donn√©es de synchronisation temporaires...');
          await AsyncStorage.removeItem('@firestoreSyncPending');
          await AsyncStorage.removeItem('@tempPassword');
          console.log('üóëÔ∏è [SYNC] Nettoyage termin√©.');

        }
      } catch (error) {
        console.error('‚ùå [SYNC] Erreur critique lors de la synchronisation Firestore:', error);
      }
    };

    checkAndSync();

  }, [user, refreshUserProfile]); // Le hook se d√©clenchera √† chaque changement de l'objet `user`
};